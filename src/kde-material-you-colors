#!/usr/bin/python3
import time
import argparse
import utils
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Automatic Material You Colors Generator from your wallpaper for the Plasma Desktop')
    parser.add_argument('--monitor', '-m', type=int,
                        help='Monitor to get wallpaper (default is 0) but second one is 6 in my case, play with this to find yours', default=None)
    parser.add_argument('--plugin', '-p', type=str,
                        help=f'Wallpaper plugin id (default is {utils.DEFAULT_PLUGIN}) you can find them in: /usr/share/plasma/wallpapers/ or ~/.local/share/plasma/wallpapers', default=None)
    parser.add_argument('--file', '-f', type=str,
                        help='Text file that contains wallpaper absolute path (Takes precedence over the above options)', default=None)
    parser.add_argument('--ncolor', '-n', type=int,
                        help='Alternative color mode (default is 0), some images return more than one color, this will use either the matched or last one', default=None)
    parser.add_argument('--light', '-l', action='store_true',
                        help='Enable Light mode (default is Dark)')
    parser.add_argument('--dark', '-d', action='store_true',
                        help='Enable Dark mode (ignores user config)')
    parser.add_argument('--autostart', '-a', action='store_true',
                        help='Enable (copies) the startup script to automatically start with KDE')
    parser.add_argument('--copyconfig', '-c', action='store_true',
                        help='Copies the default config to ~/.config/kde-material-you-colors/config.conf')
    parser.add_argument('--iconslight', type=str,
                        help='Icons for Dark scheme', default=None)
    parser.add_argument('--iconsdark', type=str,
                        help='Icons for Light scheme', default=None)
    parser.add_argument('--pywal', '-wal', action='store_true',
                        help='Use pywal to theme other apps with Material You')
    parser.add_argument('--pywallight', '-wall', action='store_true',
                        help='Use Light mode for pywal controlled apps')
    parser.add_argument('--pywaldark', '-wald', action='store_true',
                        help='Use Dark mode for pywal controlled apps')
    parser.add_argument('--lbmultiplier', '-lbm', type=float,
                        help='The amount of color for backgrounds in Light mode (value from 0 to 4.0, default is 1)', default=None)
    parser.add_argument('--dbmultiplier', '-dbm', type=float,
                        help='The amount of color for backgrounds in Dark mode (value from 0 to 4.0, default is 1)', default=None)
    parser.add_argument('--on-change-hook', type=str,
                        help='A script/command that will be executed on start or wallpaper/dark/light/settings change', default=None)
    parser.add_argument('--sierra-breeze-buttons-color', '-sbb', action='store_true',
                        help='Tint Sierra Breeze decoration buttons')
    parser.add_argument('--konsole-profile', '-kp', type=str,
                        help='The name of your (existing) Konsole profile that is going to be themed, you can check your current profiles with konsole  --list-profiles', default=None)
    parser.add_argument('--titlebar-opacity', '-tio', type=int,
                        help='Titlebar opacity (value from 0 to 100, default is None)', default=None)
    parser.add_argument('--toolbar-opacity', '-too', type=int,
                        help='ToolBar opacity, needs Lightly Application Style (value from 0 to 100, default is None)', default=None)
    parser.add_argument('--konsole-opacity', '-ko', type=int,
                        help='Konsole background opacity (value from 0 to 100, default is None)', default=None)
    parser.add_argument('--color', '-col', type=str,
                        help='Custom color (hex or rgb) used to generate M3 color scheme', default=None)
    parser.add_argument('--stop', action='store_true',
                        help='Kill an existing instance of kde-material-you-colors and exit')

    # Get commandline arguments
    args = parser.parse_args()
    # Check for one shot arguments
    utils.one_shot_actions(args)
    # Kill existing instance if found
    utils.kill_existing()

    # at first settings are empty so first initial apply is done
    config_watcher = utils.Watcher(None)
    wallpaper_watcher = utils.Watcher(None)
    wallpaper_modified = utils.Watcher(None)
    light_mode_watcher = utils.Watcher(None)
    icons_watcher = utils.Watcher(None)
    titlebar_opacity_watcher = utils.Watcher(None)
    group1_watcher = utils.Watcher(None)
    schemes_watcher = utils.Watcher(None)
    material_colors = utils.Watcher(None)
    first_run_watcher = utils.Watcher(True)
    konsole_profile_modified = utils.Watcher(None)
    plasma_scheme_watcher = utils.Watcher(None)
    while True:
        # Get config from file and compare it with passed args
        config = utils.Configs(args)
        # Get current options, pass to watcher
        config_watcher.set_value(config.options)
        # Get wallpaper
        wallpaper_watcher.set_value(
            utils.get_wallpaper_data(
                plugin=config_watcher.get_new_value()['plugin'],
                monitor=config_watcher.get_new_value()['monitor'],
                color=config_watcher.get_new_value()['color'],
                light=config_watcher.get_new_value()['light']
            ))

        if wallpaper_watcher.get_new_value() != None:
            # Get light/dark scheme status
            plasma_scheme_watcher.set_value(utils.kde_globals_light())

            utils.apply_themes(
                config_watcher,
                wallpaper_watcher,
                wallpaper_modified,
                group1_watcher,
                light_mode_watcher,
                schemes_watcher,
                material_colors,
                first_run_watcher,
                konsole_profile_modified,
                plasma_scheme_watcher)
        time.sleep(1)
